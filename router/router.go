package router

import (
	"log/slog"
	"net/http"
	"net/http/pprof" // Import pprof package

	httpSwagger "github.com/swaggo/http-swagger"

	"gostreampuller/config"
	_ "gostreampuller/docs" // docs is generated by Swag CLI
	"gostreampuller/handler"
	"gostreampuller/middleware"
	"gostreampuller/service"
)

// Router holds the HTTP multiplexer and configuration.
type Router struct {
	Mux *http.ServeMux
	cfg *config.Config
}

// New creates a new Router instance and initializes routes.
func New(cfg *config.Config) *Router {
	mux := http.NewServeMux()

	// Create services
	downloader := service.NewDownloader(cfg)
	streamer := service.NewStreamer(cfg, downloader) // Instantiate the new streamer service

	// Create handlers
	healthHandler := handler.NewHealthHandler()
	downloadVideoHandler := handler.NewDownloadVideoHandler(downloader)
	downloadAudioHandler := handler.NewDownloadAudioHandler(downloader)
	streamVideoHandler := handler.NewStreamVideoHandler(downloader) // This handler still uses direct piping
	streamAudioHandler := handler.NewStreamAudioHandler(downloader) // This handler still uses direct piping
	webStreamHandler := handler.NewWebStreamHandler(downloader, streamer) // Pass streamer to web handler

	// Register routes
	// Order matters for http.ServeMux: more specific paths should generally come before more general ones.
	// Method-specific handlers for specific paths.
	mux.HandleFunc("GET /health", healthHandler.Handle)

	// Download routes (more specific paths)
	mux.HandleFunc("POST /download/video", downloadVideoHandler.Handle)
	mux.HandleFunc("GET /download/video/{filename}", downloadVideoHandler.ServeDownloadedVideo)
	mux.HandleFunc("POST /download/video/info", downloadVideoHandler.GetVideoInfo)
	mux.HandleFunc("POST /download/audio", downloadAudioHandler.Handle)
	mux.HandleFunc("GET /download/audio/{filename}", downloadAudioHandler.ServeDownloadedAudio)
	mux.HandleFunc("DELETE /download/delete/{filename}", downloadVideoHandler.DeleteDownloadedFile) // Re-use for any file deletion
	mux.HandleFunc("GET /download/list", downloadVideoHandler.ListDownloadedFiles)                  // Re-use for any file listing

	// Stream routes (these still use direct piping from downloader)
	mux.HandleFunc("POST /stream/video", streamVideoHandler.Handle)
	mux.HandleFunc("POST /stream/audio", streamAudioHandler.Handle)

	// Pprof endpoints (more specific paths, if debug mode is enabled)
	if cfg.DebugMode {
		slog.Info("Debug mode enabled: Registering pprof endpoints")
		mux.HandleFunc("/debug/pprof/", pprof.Index)
		mux.HandleFunc("/debug/pprof/cmdline", pprof.Cmdline)
		mux.HandleFunc("/debug/pprof/profile", pprof.Profile)
		mux.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
		mux.HandleFunc("/debug/pprof/trace", pprof.Trace)
	}

	// Swagger UI (prefix match, should come before the root handler)
	mux.HandleFunc("/swagger/", httpSwagger.WrapHandler)
	slog.Info("Swagger UI available at /swagger/index.html")

	// Web Stream routes - using /web prefix
	mux.HandleFunc("GET /web", webStreamHandler.ServeStreamPage)
	mux.HandleFunc("POST /web", webStreamHandler.HandleWebStream)
	mux.HandleFunc("GET /web/play", webStreamHandler.PlayWebStream)                   // Now uses streamer.ProxyVideo
	mux.HandleFunc("GET /web/download/video", webStreamHandler.DownloadVideoToBrowser) // Now uses streamer.ProxyVideo
	mux.HandleFunc("GET /web/download/audio", webStreamHandler.DownloadAudioToBrowser) // Now uses streamer.ProxyAudio

	return &Router{
		Mux: mux,
		cfg: cfg,
	}
}

// Handler returns the http.Handler with middleware applied.
func (r *Router) Handler() http.Handler {
	// Wrap the ServeMux with the logging middleware
	return middleware.LoggingMiddleware(r.cfg)(r.Mux)
}
