package router

import (
	"log/slog"
	"net/http"
	"net/http/pprof" // Import pprof package

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	httpSwagger "github.com/swaggo/http-swagger"

	"gostreampuller/config"
	_ "gostreampuller/docs" // docs is generated by Swag CLI
	"gostreampuller/handler"
	appMiddleware "gostreampuller/middleware" // Renamed to avoid conflict with chi.middleware
	"gostreampuller/service"
)

// Router holds the HTTP multiplexer and configuration.
type Router struct {
	Mux *chi.Mux
	cfg *config.Config
}

// New creates a new Router instance and initializes routes.
func New(cfg *config.Config) *Router {
	r := chi.NewRouter()

	// Add common middleware
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(appMiddleware.LoggingMiddleware(cfg)) // Use our custom logging middleware
	r.Use(middleware.Recoverer)                 // Recover from panics and return 500 error

	// Create services
	progressManager := service.NewProgressManager()           // Instantiate ProgressManager
	downloader := service.NewDownloader(cfg, progressManager) // Pass ProgressManager to Downloader

	// Create handlers
	healthHandler := handler.NewHealthHandler()
	downloadVideoHandler := handler.NewDownloadVideoHandler(downloader)
	downloadAudioHandler := handler.NewDownloadAudioHandler(downloader)
	streamVideoHandler := handler.NewStreamVideoHandler(downloader)
	streamAudioHandler := handler.NewStreamAudioHandler(downloader)
	webStreamHandler := handler.NewWebStreamHandler(downloader, progressManager) // Pass ProgressManager to web handler

	// Public routes
	r.Get("/health", healthHandler.Handle)

	// Download routes
	r.Group(func(downloadRouter chi.Router) {
		// Add any specific middleware for download routes here if needed
		downloadRouter.Post("/download/video", downloadVideoHandler.Handle)
		downloadRouter.Get("/download/video/{filename}", downloadVideoHandler.ServeDownloadedVideo)
		downloadRouter.Post("/download/video/info", downloadVideoHandler.GetVideoInfo)
		downloadRouter.Post("/download/audio", downloadAudioHandler.Handle)
		downloadRouter.Get("/download/audio/{filename}", downloadAudioHandler.ServeDownloadedAudio)
		downloadRouter.Delete("/download/delete/{filename}", downloadVideoHandler.DeleteDownloadedFile) // Re-use for any file deletion
		downloadRouter.Get("/download/list", downloadVideoHandler.ListDownloadedFiles)                  // Re-use for any file listing
	})

	// Stream routes
	r.Group(func(streamRouter chi.Router) {
		streamRouter.Post("/stream/video", streamVideoHandler.Handle)
		streamRouter.Post("/stream/audio", streamAudioHandler.Handle)
	})

	// Pprof endpoints (if debug mode is enabled)
	if cfg.DebugMode {
		slog.Info("Debug mode enabled: Registering pprof endpoints")
		r.Group(func(pprofRouter chi.Router) {
			pprofRouter.Get("/debug/pprof/*", http.HandlerFunc(pprof.Index))
			pprofRouter.Get("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
			pprofRouter.Get("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
			pprofRouter.Get("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
			pprofRouter.Get("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))
		})
	}

	// Swagger UI
	r.Get("/swagger/*", httpSwagger.WrapHandler)
	slog.Info("Swagger UI available at /swagger/index.html")

	// Web Stream routes - using /web prefix
	r.Group(func(webRouter chi.Router) {
		webRouter.Get("/", webStreamHandler.ServeMainPage)                            // New root handler
		webRouter.Post("/load-info", webStreamHandler.HandleLoadInfo)                 // New handler for initial URL submission
		webRouter.Get("/web", webStreamHandler.ServeStreamPage)                       // Now serves the stream.html with info
		webRouter.Post("/web", webStreamHandler.HandleOperation)                      // Handles operations from stream.html
		webRouter.Get("/web/play", webStreamHandler.PlayWebStream)                    // Uses downloader.StreamVideo
		webRouter.Get("/web/download/video", webStreamHandler.DownloadVideoToBrowser) // Uses downloader.DownloadVideoToTempFile
		webRouter.Get("/web/download/audio", webStreamHandler.DownloadAudioToBrowser) // Uses downloader.DownloadAudioToTempFile
		webRouter.Get("/web/progress", webStreamHandler.ServeProgress)                // New SSE endpoint
	})

	return &Router{
		Mux: r,
		cfg: cfg,
	}
}

// Handler returns the http.Handler with middleware applied.
func (r *Router) Handler() http.Handler {
	// The middleware is now applied directly when creating the chi.Mux instance.
	return r.Mux
}
